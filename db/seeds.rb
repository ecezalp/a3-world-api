# This file should contain all the record creation needed to seed the database with its default values.
# The data can then be loaded with the rails db:seed command (or created alongside the database with db:setup).
#
# Examples:
#
#   movies = Movie.create([{ name: 'Star Wars' }, { name: 'Lord of the Rings' }])
#   Character.create(name: 'Luke', movie: movies.first)

Review.create(resource_link: "http://www.poodr.com/", review: "The accessible nature of this chapter makes for a very entertaining reading experience. Metz starts by explaining the nature of objects as she compares the similarities between real-world and virtual presences to illustrate objects as distinct, individual entities. Objects are not supposed to be created for the sole purpose of their mapped out interactions. Rather, the interaction between healthy objects is a natural progression of their behavior.  A great example Metz uses: It would be impractical to write a specific method to calculate what would happen when a spouse steps on a cat. If a confined space contains a cat that doesn’t like to be stepped on and a spouse that takes steps, the consequence is bound to occur naturally.

Metz argues that the world, of programming or otherwise, is a series of spontaneous interactions between objects. Objects interact by sending each other messages.  It is the responsibility of the programmer to ensure the durability of the objects given their eventual environmental change and to sustain their communication. Programs are not capsules that exist independently from the outside world – they serve to interact with it, just like objects are bound to interact with each other. As for the simplest example, the desires of the customers who purchase the software might change, and the software must be flexible enough to accommodate their needs. As far as I have learned during an API lecture, something as fundamental as a JSON file that acts like a data hash in remote server might change. OOD offers the management of dependencies (which facilitates the process of maintenance), because OOD is a set of coding techniques that tolerate change. OOD is not about creating as many bonds between objects as possible in a neural sort of network, but instead it serves to create evolving objects and pluggable junctions that can be cleanly replaced. Expectations constrain objects and simplicity liberates them, and the health of Ruby code is derived from the health of its objects.

Metz mentions a few principles such as the SOLID acronym for Single Responsibility, Open-Closed, Liskov Substitution, Interface Segregation, and Dependency Inversion; DRY for Don’t Repeat Yourself, and LoD for Law of Demeter, but doesn’t go into detail. She mentions that they will be covered throughout the text. She briefly discusses the evolution of general OOD and Ruby design, and concludes that the use of the techniques covered in the text will yield to high-quality code. Every programmer knows that there is no single methodology or lexicon behind creation, yet Metz argues that different approaches, as long as they are OOD effective, will generate  sustainable works of art. Speaking of OOD effectiveness, she argues that patterns of design that emancipate creativity have already emerged in the history of Ruby programming, and it is her intention to explore them in POODR.

Metz warns about the overuse of the aforementioned design patterns, and suggests establishing familiarity with the Agile software movement. The Agile movement demands synchronization between the designer and the customer during the process of design, and suggests the building to be advanced in increments. According to this philosophy, a Big Up Front Design (BUFD) is susceptible to failure since it is unable to guarantee the flexibility offered by Agile.

There seems to be Ruby gems available that evaluate the design of code, and Metz argues that they are almost unequivocally correct in assessing not the presence, but the lack of quality. However, she also mentions something very intuitive: a working yet badly designed code is always preferable to code that is well-designed yet incomplete. She then discusses the degrees of working code and coins the gap between the high and low quality code as technical debt. OOD prevents this debt.

A brief discussion of datatypes follows. The beauty of Ruby where datatypes are also classes (and therefore objects) shines through. There is not a chasm between data and behavior, since the data exhibits behaviors as well by adhering to the class it belongs. Classes define methods and attributes (behaviors and variables), and so objects can interact. Methods get invoked in response to messages, and classes are used to instantiate objects by acting as blue-prints for each instantiation.

I found this chapter to be very pleasing, and more philosophical than methodological in the best way possible. I can easily say that engaging with this text and attempting to distill its essence has already been a very valuable experience for me. I am very excited to keep on reading, and I can’t wait to write more as I read along.", title: "POODR - Object Oriented Design", description: "Practical Object-Oriented Design in Ruby (POODR) is a programmers tale about how to write object-oriented code. Written by Sandi Metz, it explains object-oriented design (OOD) using realistic, understandable examples.")

Review.create(resource_link: "http://www.poodr.com/", review:"can you believe that I am a fake review yo", title: "fake review is my tay tay ", description: "gozlerin mi islak yoksa islak mi yasamak dedin?")
Review.create(resource_link: "http://www.poodr.com/", review:"im here", title: "fasdfadsfasdfasdfasdfa", description: "gozldfgsdfgsdfgdin?")
Review.create(resource_link: "http://www.poodr.com/", review:"i like listening to long music", title: "fhdsfg ", description: "gozlerinasdfasdfasdfaoksa islak mi yasamak dedin?")
Review.create(resource_link: "http://www.poodr.com/", review:"oooooooo", title: "fhhhhhhhhhh", description: "gkkkkkkkkkk")

Project.create(heroku_link: "http://google.com", github_link: "http://google.com", demo_link: "http://google.com", title: "Faker 1", description: "TwitchRuns brings together Twitch.tv (World's biggest game streaming site) and SpeedRuns (World Record game videos) with React - Redux and a Rails API")
Project.create(heroku_link: "http://google.com", github_link: "http://google.com", demo_link: "http://google.com", title: "Fake project 2", description: "I play in the sun")
Project.create(heroku_link: "http://google.com", github_link: "http://google.com", demo_link: "http://google.com", title: "Totally phake", description: "I am fake fake")

Algorithm.create(image_links: "http://google.com", title: "euler 1", description: "this is an algorithm")
Algorithm.create(image_links: "http://google.com", title: "euler 2", description: "this is another algorithm")
Algorithm.create(image_links: "http://google.com", title: "euler 3", description: "this is yet a different algorithm")
